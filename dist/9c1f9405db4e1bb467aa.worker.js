!function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t);const r=Symbol("Comlink.proxy"),a=Symbol("Comlink.endpoint"),o=new WeakSet,i=new Map([["proxy",{canHandle:e=>e&&e[r],serialize(e){const{port1:t,port2:n}=new MessageChannel;return s(e,t),[n,[n]]},deserialize:e=>(e.start(),function(e){return function e(t,n=[]){const r=new Proxy((function(){}),{get(a,o){if("then"===o){if(0===n.length)return{then:()=>r};const e=h(t,{type:0,path:n.map(e=>e.toString())}).then(f);return e.then.bind(e)}return e(t,[...n,o])},set(e,r,a){const[o,i]=c(a);return h(t,{type:1,path:[...n,r].map(e=>e.toString()),value:o},i).then(f)},apply(r,o,i){const s=n[n.length-1];if(s===a)return h(t,{type:4}).then(f);if("bind"===s)return e(t,n.slice(0,-1));const[l,c]=u(i);return h(t,{type:2,path:n.map(e=>e.toString()),argumentList:l},c).then(f)},construct(e,r){const[a,o]=u(r);return h(t,{type:3,path:n.map(e=>e.toString()),argumentList:a},o).then(f)}});return r}(e)}(e))}],["throw",{canHandle:e=>o.has(e),serialize(e){const t=e instanceof Error;let n=e;return t&&(n={isError:t,message:e.message,stack:e.stack}),[n,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error,e);throw e}}]]);function s(e,t=self){t.addEventListener("message",async n=>{if(!n||!n.data)return;const{id:a,type:i,path:u}={path:[],...n.data},h=(n.data.argumentList||[]).map(f);let d;try{const t=u.slice(0,-1).reduce((e,t)=>e[t],e),a=u.reduce((e,t)=>e[t],e);switch(i){case 0:d=await a;break;case 1:t[u.slice(-1)[0]]=f(n.data.value),d=!0;break;case 2:d=await a.apply(t,h);break;case 3:d=function(e){return Object.assign(e,{[r]:!0})}(await new a(...h));break;case 4:{const{port1:t,port2:n}=new MessageChannel;s(e,n),d=function(e,t){return l.set(e,t),e}(t,[t])}break;default:console.warn("Unrecognized message",n.data)}}catch(e){d=e,o.add(e)}const[p,y]=c(d);t.postMessage({...p,id:a},y)}),t.start&&t.start()}function u(e){const t=e.map(c);return[t.map(e=>e[0]),(n=t.map(e=>e[1]),Array.prototype.concat.apply([],n))];var n}const l=new WeakMap;function c(e){for(const[t,n]of i)if(n.canHandle(e)){const[r,a]=n.serialize(e);return[{type:3,name:t,value:r},a]}return[{type:0,value:e},l.get(e)||[]]}function f(e){switch(e.type){case 3:return i.get(e.name).deserialize(e.value);case 0:return e.value}}function h(e,t,n){return new Promise(r=>{const a=new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-");e.addEventListener("message",(function t(n){n.data&&n.data.id&&n.data.id===a&&(e.removeEventListener("message",t),r(n.data))})),e.start&&e.start(),e.postMessage({id:a,...t},n)})}n.d(t,"WavRangeReq",(function(){return y}));var d=function(e,t,n,r){return new(n||(n=Promise))((function(a,o){function i(e){try{u(r.next(e))}catch(e){o(e)}}function s(e){try{u(r.throw(e))}catch(e){o(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}u((r=r.apply(e,t||[])).next())}))},p=function(e,t){var n,r,a,o,i={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(a=2&o[0]?r.return:o[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,o[1])).done)return a;switch(r=0,a&&(o=[2&o[0],a.value]),o[0]){case 0:case 1:a=o;break;case 4:return i.label++,{value:o[1],done:!1};case 5:i.label++,r=o[1],o=[0];continue;case 7:o=i.ops.pop(),i.trys.pop();continue;default:if(!(a=(a=i.trys).length>0&&a[a.length-1])&&(6===o[0]||2===o[0])){i=0;continue}if(3===o[0]&&(!a||o[1]>a[0]&&o[1]<a[3])){i.label=o[1];break}if(6===o[0]&&i.label<a[1]){i.label=a[1],a=o;break}if(a&&i.label<a[2]){i.label=a[2],i.ops.push(o);break}a[2]&&i.ops.pop(),i.trys.pop();continue}o=t.call(e,i)}catch(e){o=[6,e],r=0}finally{n=a=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},y=function(){function e(){}return e.prototype.setURL=function(e){return d(this,void 0,void 0,(function(){var t,n;return p(this,(function(r){switch(r.label){case 0:return[4,fetch(e,{method:"GET",headers:{Range:"bytes=0-200"}})];case 1:return[4,r.sent().arrayBuffer()];case 2:return t=r.sent(),n=this.parseWavHeader(t),this.wavFileInfo={url:e,headerInfos:n,firstSampleBlockIdx:0,lastSampleBlockIdx:n.dataChunkSize/n.BlockAlign-1},[2]}}))}))},e.prototype.getWavFileInfo=function(){return d(this,void 0,void 0,(function(){return p(this,(function(e){return[2,this.wavFileInfo]}))}))},e.prototype.getRange=function(e,t){return d(this,void 0,void 0,(function(){var n,r,a,o,i,s;return p(this,(function(u){switch(u.label){case 0:if(e<0||t>this.wavFileInfo.lastSampleBlockIdx)throw"startSample or endSample out of range";return n=this.sampleBlockIdxToByte(e),r=this.sampleBlockIdxToByte(t+1)-1,[4,fetch(this.wavFileInfo.url,{method:"GET",headers:{Range:"bytes="+n+"-"+r}})];case 1:return[4,u.sent().arrayBuffer()];case 2:return a=u.sent(),o=new Uint8Array(this.wavFileInfo.headerInfos.origBinaryHeader),(i=new Uint32Array(o.buffer,this.wavFileInfo.headerInfos.dataChunkSizeIdx,1))[0]=(t-e+1)*this.wavFileInfo.headerInfos.NumChannels*(this.wavFileInfo.headerInfos.BitsPerSample/8),(s=new Uint8Array(o.length+i[0])).set(o,0),s.set(new Uint8Array(a),o.length),[2,{numberOfChannels:this.wavFileInfo.headerInfos.NumChannels,length:i[0]/this.wavFileInfo.headerInfos.NumChannels/(this.wavFileInfo.headerInfos.BitsPerSample/8),sampleRate:this.wavFileInfo.headerInfos.SampleRate,buffer:s.buffer,startSampleBlockIdx:e,endSampleBlockIdx:t}]}}))}))},e.prototype.calculatePeaks=function(e){console.log(e)},e.prototype.sampleBlockIdxToByte=function(e){return this.wavFileInfo.headerInfos.offsetToDataChunk+e*this.wavFileInfo.headerInfos.BlockAlign},e.prototype.parseWavHeader=function(e){var t,n;t=0,n=new Uint8Array(e,t,4);var r=String.fromCharCode.apply(null,n);if("RIFF"!==r)throw new Error("Wav read error: ChunkID not RIFF but "+r);t=4;var a=(n=new Uint32Array(e,t,1))[0];t=8,n=new Uint8Array(e,t,4);var o=String.fromCharCode.apply(null,n);if("WAVE"!==o)throw new Error("Wav read error: Format not WAVE but "+o);for(var i,s=!1,u=12;!s;){if(n=new Uint8Array(e,u,4),"fmt "===(b=String.fromCharCode.apply(null,n))?(i="fmt ",s=!0):u+=1,"data"===b)throw new Error('Wav read error: Reached end of header by reaching data sub-chunk without finding "fmt " sub-chunk')}t=u+4;var l=(n=new Uint32Array(e,t,4))[0];t=u+8;var c=(n=new Uint16Array(e,t,2))[0];if(-1===[0,1].indexOf(c))throw new Error("Wav read error: AudioFormat not 0 or 1 but "+c);t=u+10;var f=(n=new Uint16Array(e,t,2))[0];if(f<1)throw new Error("Wav read error: NumChannels not greater than 1 but "+f);t=u+12;var h=(n=new Uint32Array(e,t,1))[0];t=u+16;var d=(n=new Uint32Array(e,t,1))[0];t=u+20;var p=(n=new Uint16Array(e,t,1))[0];t=u+22;var y=(n=new Uint16Array(e,t,1))[0];s=!1;for(var w,m,v,g=u+24;!s;){var b;n=new Uint8Array(e,g,4),"data"===(b=String.fromCharCode.apply(null,n))?(s=!0,w=g+4,m=(n=new Uint32Array(e,g+4,1))[0],v=g+8):g+=1}return{ChunkID:r,ChunkSize:a,Format:o,FmtSubchunkID:i,FmtSubchunkSize:l,AudioFormat:c,NumChannels:f,SampleRate:h,ByteRate:d,BlockAlign:p,BitsPerSample:y,dataChunkSizeIdx:w,dataChunkSize:m,offsetToDataChunk:v,origBinaryHeader:new Uint8Array(e,0,v)}},e}();s(Object.keys(t).reduce((function(e,n){return"__esModule"==n?e:(e[n]=t[n],e)}),{}))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly93YXZSYW5nZVJlcXVlc3RzL3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3dhdlJhbmdlUmVxdWVzdHMvLi9ub2RlX21vZHVsZXMvY29tbGluay9kaXN0L2VzbS9jb21saW5rLm1qcyIsIndlYnBhY2s6Ly93YXZSYW5nZVJlcXVlc3RzLy4vc3JjL3dhdnJhbmdlcmVxLndvcmtlci50cyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInByb3h5TWFya2VyIiwiY3JlYXRlRW5kcG9pbnQiLCJ0aHJvd1NldCIsIldlYWtTZXQiLCJ0cmFuc2ZlckhhbmRsZXJzIiwiTWFwIiwiY2FuSGFuZGxlIiwib2JqIiwicG9ydDEiLCJwb3J0MiIsIk1lc3NhZ2VDaGFubmVsIiwiZXhwb3NlIiwiZGVzZXJpYWxpemUiLCJwb3J0Iiwic3RhcnQiLCJlcCIsImNyZWF0ZVByb3h5IiwicGF0aCIsInByb3h5IiwiUHJveHkiLCJfdGFyZ2V0IiwicHJvcCIsImxlbmd0aCIsInRoZW4iLCJyZXF1ZXN0UmVzcG9uc2VNZXNzYWdlIiwidHlwZSIsIm1hcCIsInRvU3RyaW5nIiwiZnJvbVdpcmVWYWx1ZSIsInJhd1ZhbHVlIiwidHJhbnNmZXJhYmxlcyIsInRvV2lyZVZhbHVlIiwiX3RoaXNBcmciLCJyYXdBcmd1bWVudExpc3QiLCJsYXN0Iiwic2xpY2UiLCJhcmd1bWVudExpc3QiLCJwcm9jZXNzQXJndW1lbnRzIiwid3JhcCIsImhhcyIsImlzRXJyb3IiLCJFcnJvciIsInNlcmlhbGl6ZWQiLCJtZXNzYWdlIiwic3RhY2siLCJhc3NpZ24iLCJzZWxmIiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2IiwiZGF0YSIsImlkIiwicmV0dXJuVmFsdWUiLCJwYXJlbnQiLCJyZWR1Y2UiLCJhcHBseSIsInRyYW5zZmVycyIsInRyYW5zZmVyQ2FjaGUiLCJzZXQiLCJ0cmFuc2ZlciIsImNvbnNvbGUiLCJ3YXJuIiwiZSIsImFkZCIsIndpcmVWYWx1ZSIsInBvc3RNZXNzYWdlIiwicHJvY2Vzc2VkIiwidiIsImFyciIsIkFycmF5IiwiY29uY2F0IiwiV2Vha01hcCIsImhhbmRsZXIiLCJzZXJpYWxpemVkVmFsdWUiLCJzZXJpYWxpemUiLCJtc2ciLCJQcm9taXNlIiwicmVzb2x2ZSIsImZpbGwiLCJNYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJOdW1iZXIiLCJNQVhfU0FGRV9JTlRFR0VSIiwiam9pbiIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJfX2F3YWl0ZXIiLCJ0aGlzQXJnIiwiX2FyZ3VtZW50cyIsIlAiLCJnZW5lcmF0b3IiLCJyZWplY3QiLCJmdWxmaWxsZWQiLCJzdGVwIiwibmV4dCIsInJlamVjdGVkIiwicmVzdWx0IiwiZG9uZSIsIl9fZ2VuZXJhdG9yIiwiYm9keSIsImYiLCJ5IiwiZyIsIl8iLCJsYWJlbCIsInNlbnQiLCJ0cnlzIiwib3BzIiwidmVyYiIsIml0ZXJhdG9yIiwidGhpcyIsIm9wIiwiVHlwZUVycm9yIiwicG9wIiwicHVzaCIsIldhdlJhbmdlUmVxIiwic2V0VVJMIiwidXJsIiwiYnVmZmVyIiwiaGVhZGVySW5mb3MiLCJfYSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsIlJhbmdlIiwiYXJyYXlCdWZmZXIiLCJwYXJzZVdhdkhlYWRlciIsIndhdkZpbGVJbmZvIiwiZmlyc3RTYW1wbGVCbG9ja0lkeCIsImxhc3RTYW1wbGVCbG9ja0lkeCIsImRhdGFDaHVua1NpemUiLCJCbG9ja0FsaWduIiwiZ2V0V2F2RmlsZUluZm8iLCJnZXRSYW5nZSIsInN0YXJ0U2FtcGxlQmxvY2tJZHgiLCJlbmRTYW1wbGVCbG9ja0lkeCIsImZpcnN0Qnl0ZSIsImxhc3RCeXRlIiwic2FtcGxlc0JpbiIsImhlYWRlckJpbiIsImN1ckJ1ZmZlclZpZXciLCJ3YXZGaWxlQmluIiwic2FtcGxlQmxvY2tJZHhUb0J5dGUiLCJVaW50OEFycmF5Iiwib3JpZ0JpbmFyeUhlYWRlciIsIlVpbnQzMkFycmF5IiwiZGF0YUNodW5rU2l6ZUlkeCIsIk51bUNoYW5uZWxzIiwiQml0c1BlclNhbXBsZSIsIm51bWJlck9mQ2hhbm5lbHMiLCJzYW1wbGVSYXRlIiwiU2FtcGxlUmF0ZSIsImNhbGN1bGF0ZVBlYWtzIiwiYXVkaW9CdWZmZXIiLCJsb2ciLCJzYW1wbGVCbG9ja0lkeCIsIm9mZnNldFRvRGF0YUNodW5rIiwiYnVmIiwiY3VyQmluSWR4IiwiQ2h1bmtJRCIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIkNodW5rU2l6ZSIsIkZvcm1hdCIsIkZtdFN1YmNodW5rSUQiLCJmb3VuZENodW5rIiwiZm10QmluSWR4IiwiY3VyNGNoYXJzIiwiRm10U3ViY2h1bmtTaXplIiwiQXVkaW9Gb3JtYXQiLCJVaW50MTZBcnJheSIsImluZGV4T2YiLCJCeXRlUmF0ZSIsImRhdGFCaW5JZHgiLCJrZXlzIiwiX193ZWJwYWNrX2V4cG9ydHNfXyIsImsiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcs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YnRCLFlBQWFBLEVBQ2JJLFdBQVlBLEVBQ1pxQixTQUFVQSxFQUNWekMsV0FBWUEsRUFDWmlCLGNBQWVBLEVBQ2ZGLGlCQUFrQkEsRUFDbEJoQixjQUFlQSxFQUNmMEIsa0JBQW1CQSxFQUNuQlosaUJBQWtCLElBQUlELFdBQVdjLEVBQUssRUFBR0QsS0FJMUN6QyxFQXZNcUIsR0EyTTlCdkcsRUFDRWpDLE9BQU9tTSxLQUFLQyxHQUFxQnpILFFBQU8sU0FBU3ZFLEVBQUVpTSxHQUNqRCxNQUFPLGNBQUhBLEVBQXdCak0sR0FDNUJBLEVBQUVpTSxHQUFLRCxFQUFvQkMsR0FDcEJqTSxLQUNQIiwiZmlsZSI6IjljMWY5NDA1ZGI0ZTFiYjQ2N2FhLndvcmtlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsIi8qKlxyXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxyXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xyXG4gKiB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuXHJcbiAqIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxyXG4gKiAgICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbmNvbnN0IHByb3h5TWFya2VyID0gU3ltYm9sKFwiQ29tbGluay5wcm94eVwiKTtcclxuY29uc3QgY3JlYXRlRW5kcG9pbnQgPSBTeW1ib2woXCJDb21saW5rLmVuZHBvaW50XCIpO1xyXG5jb25zdCB0aHJvd1NldCA9IG5ldyBXZWFrU2V0KCk7XHJcbmNvbnN0IHRyYW5zZmVySGFuZGxlcnMgPSBuZXcgTWFwKFtcclxuICAgIFtcclxuICAgICAgICBcInByb3h5XCIsXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBjYW5IYW5kbGU6IG9iaiA9PiBvYmogJiYgb2JqW3Byb3h5TWFya2VyXSxcclxuICAgICAgICAgICAgc2VyaWFsaXplKG9iaikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBwb3J0MSwgcG9ydDIgfSA9IG5ldyBNZXNzYWdlQ2hhbm5lbCgpO1xyXG4gICAgICAgICAgICAgICAgZXhwb3NlKG9iaiwgcG9ydDEpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtwb3J0MiwgW3BvcnQyXV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlc2VyaWFsaXplOiAocG9ydCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgcG9ydC5zdGFydCgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHdyYXAocG9ydCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICBdLFxyXG4gICAgW1xyXG4gICAgICAgIFwidGhyb3dcIixcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGNhbkhhbmRsZTogb2JqID0+IHRocm93U2V0LmhhcyhvYmopLFxyXG4gICAgICAgICAgICBzZXJpYWxpemUob2JqKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBpc0Vycm9yID0gb2JqIGluc3RhbmNlb2YgRXJyb3I7XHJcbiAgICAgICAgICAgICAgICBsZXQgc2VyaWFsaXplZCA9IG9iajtcclxuICAgICAgICAgICAgICAgIGlmIChpc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2VyaWFsaXplZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNFcnJvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogb2JqLm1lc3NhZ2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YWNrOiBvYmouc3RhY2tcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIFtzZXJpYWxpemVkLCBbXV07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlc2VyaWFsaXplKG9iaikge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9iai5pc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgT2JqZWN0LmFzc2lnbihuZXcgRXJyb3IoKSwgb2JqKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHRocm93IG9iajtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIF1cclxuXSk7XHJcbmZ1bmN0aW9uIGV4cG9zZShvYmosIGVwID0gc2VsZikge1xyXG4gICAgZXAuYWRkRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgKGFzeW5jIChldikgPT4ge1xyXG4gICAgICAgIGlmICghZXYgfHwgIWV2LmRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCB7IGlkLCB0eXBlLCBwYXRoIH0gPSB7XHJcbiAgICAgICAgICAgIHBhdGg6IFtdLFxyXG4gICAgICAgICAgICAuLi5ldi5kYXRhXHJcbiAgICAgICAgfTtcclxuICAgICAgICBjb25zdCBhcmd1bWVudExpc3QgPSAoZXYuZGF0YS5hcmd1bWVudExpc3QgfHwgW10pLm1hcChmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICBsZXQgcmV0dXJuVmFsdWU7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gcGF0aC5zbGljZSgwLCAtMSkucmVkdWNlKChvYmosIHByb3ApID0+IG9ialtwcm9wXSwgb2JqKTtcclxuICAgICAgICAgICAgY29uc3QgcmF3VmFsdWUgPSBwYXRoLnJlZHVjZSgob2JqLCBwcm9wKSA9PiBvYmpbcHJvcF0sIG9iaik7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAwIC8qIEdFVCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gYXdhaXQgcmF3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxIC8qIFNFVCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudFtwYXRoLnNsaWNlKC0xKVswXV0gPSBmcm9tV2lyZVZhbHVlKGV2LmRhdGEudmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyIC8qIEFQUExZICovOlxyXG4gICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuVmFsdWUgPSBhd2FpdCByYXdWYWx1ZS5hcHBseShwYXJlbnQsIGFyZ3VtZW50TGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzIC8qIENPTlNUUlVDVCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gYXdhaXQgbmV3IHJhd1ZhbHVlKC4uLmFyZ3VtZW50TGlzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyblZhbHVlID0gcHJveHkodmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgNCAvKiBFTkRQT0lOVCAqLzpcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHsgcG9ydDEsIHBvcnQyIH0gPSBuZXcgTWVzc2FnZUNoYW5uZWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXhwb3NlKG9iaiwgcG9ydDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm5WYWx1ZSA9IHRyYW5zZmVyKHBvcnQxLCBbcG9ydDFdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcIlVucmVjb2duaXplZCBtZXNzYWdlXCIsIGV2LmRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNhdGNoIChlKSB7XHJcbiAgICAgICAgICAgIHJldHVyblZhbHVlID0gZTtcclxuICAgICAgICAgICAgdGhyb3dTZXQuYWRkKGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBbd2lyZVZhbHVlLCB0cmFuc2ZlcmFibGVzXSA9IHRvV2lyZVZhbHVlKHJldHVyblZhbHVlKTtcclxuICAgICAgICBlcC5wb3N0TWVzc2FnZSh7IC4uLndpcmVWYWx1ZSwgaWQgfSwgdHJhbnNmZXJhYmxlcyk7XHJcbiAgICB9KSk7XHJcbiAgICBpZiAoZXAuc3RhcnQpIHtcclxuICAgICAgICBlcC5zdGFydCgpO1xyXG4gICAgfVxyXG59XHJcbmZ1bmN0aW9uIHdyYXAoZXApIHtcclxuICAgIHJldHVybiBjcmVhdGVQcm94eShlcCk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlUHJveHkoZXAsIHBhdGggPSBbXSkge1xyXG4gICAgY29uc3QgcHJveHkgPSBuZXcgUHJveHkoZnVuY3Rpb24gKCkgeyB9LCB7XHJcbiAgICAgICAgZ2V0KF90YXJnZXQsIHByb3ApIHtcclxuICAgICAgICAgICAgaWYgKHByb3AgPT09IFwidGhlblwiKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGF0aC5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4geyB0aGVuOiAoKSA9PiBwcm94eSB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgY29uc3QgciA9IHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAwIC8qIEdFVCAqLyxcclxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLm1hcChwID0+IHAudG9TdHJpbmcoKSlcclxuICAgICAgICAgICAgICAgIH0pLnRoZW4oZnJvbVdpcmVWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gci50aGVuLmJpbmQocik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3h5KGVwLCBbLi4ucGF0aCwgcHJvcF0pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2V0KF90YXJnZXQsIHByb3AsIHJhd1ZhbHVlKSB7XHJcbiAgICAgICAgICAgIC8vIEZJWE1FOiBFUzYgUHJveHkgSGFuZGxlciBgc2V0YCBtZXRob2RzIGFyZSBzdXBwb3NlZCB0byByZXR1cm4gYVxyXG4gICAgICAgICAgICAvLyBib29sZWFuLiBUbyBzaG93IGdvb2Qgd2lsbCwgd2UgcmV0dXJuIHRydWUgYXN5bmNocm9ub3VzbHkgwq9cXF8o44OEKV8vwq9cclxuICAgICAgICAgICAgY29uc3QgW3ZhbHVlLCB0cmFuc2ZlcmFibGVzXSA9IHRvV2lyZVZhbHVlKHJhd1ZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIHJlcXVlc3RSZXNwb25zZU1lc3NhZ2UoZXAsIHtcclxuICAgICAgICAgICAgICAgIHR5cGU6IDEgLyogU0VUICovLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogWy4uLnBhdGgsIHByb3BdLm1hcChwID0+IHAudG9TdHJpbmcoKSksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZVxyXG4gICAgICAgICAgICB9LCB0cmFuc2ZlcmFibGVzKS50aGVuKGZyb21XaXJlVmFsdWUpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgYXBwbHkoX3RhcmdldCwgX3RoaXNBcmcsIHJhd0FyZ3VtZW50TGlzdCkge1xyXG4gICAgICAgICAgICBjb25zdCBsYXN0ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xyXG4gICAgICAgICAgICBpZiAobGFzdCA9PT0gY3JlYXRlRW5kcG9pbnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogNCAvKiBFTkRQT0lOVCAqL1xyXG4gICAgICAgICAgICAgICAgfSkudGhlbihmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBXZSBqdXN0IHByZXRlbmQgdGhhdCBgYmluZCgpYCBkaWRu4oCZdCBoYXBwZW4uXHJcbiAgICAgICAgICAgIGlmIChsYXN0ID09PSBcImJpbmRcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZVByb3h5KGVwLCBwYXRoLnNsaWNlKDAsIC0xKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgY29uc3QgW2FyZ3VtZW50TGlzdCwgdHJhbnNmZXJhYmxlc10gPSBwcm9jZXNzQXJndW1lbnRzKHJhd0FyZ3VtZW50TGlzdCk7XHJcbiAgICAgICAgICAgIHJldHVybiByZXF1ZXN0UmVzcG9uc2VNZXNzYWdlKGVwLCB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiAyIC8qIEFQUExZICovLFxyXG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aC5tYXAocCA9PiBwLnRvU3RyaW5nKCkpLFxyXG4gICAgICAgICAgICAgICAgYXJndW1lbnRMaXN0XHJcbiAgICAgICAgICAgIH0sIHRyYW5zZmVyYWJsZXMpLnRoZW4oZnJvbVdpcmVWYWx1ZSk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBjb25zdHJ1Y3QoX3RhcmdldCwgcmF3QXJndW1lbnRMaXN0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IFthcmd1bWVudExpc3QsIHRyYW5zZmVyYWJsZXNdID0gcHJvY2Vzc0FyZ3VtZW50cyhyYXdBcmd1bWVudExpc3QpO1xyXG4gICAgICAgICAgICByZXR1cm4gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShlcCwge1xyXG4gICAgICAgICAgICAgICAgdHlwZTogMyAvKiBDT05TVFJVQ1QgKi8sXHJcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLm1hcChwID0+IHAudG9TdHJpbmcoKSksXHJcbiAgICAgICAgICAgICAgICBhcmd1bWVudExpc3RcclxuICAgICAgICAgICAgfSwgdHJhbnNmZXJhYmxlcykudGhlbihmcm9tV2lyZVZhbHVlKTtcclxuICAgICAgICB9XHJcbiAgICB9KTtcclxuICAgIHJldHVybiBwcm94eTtcclxufVxyXG5mdW5jdGlvbiBteUZsYXQoYXJyKSB7XHJcbiAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgYXJyKTtcclxufVxyXG5mdW5jdGlvbiBwcm9jZXNzQXJndW1lbnRzKGFyZ3VtZW50TGlzdCkge1xyXG4gICAgY29uc3QgcHJvY2Vzc2VkID0gYXJndW1lbnRMaXN0Lm1hcCh0b1dpcmVWYWx1ZSk7XHJcbiAgICByZXR1cm4gW3Byb2Nlc3NlZC5tYXAodiA9PiB2WzBdKSwgbXlGbGF0KHByb2Nlc3NlZC5tYXAodiA9PiB2WzFdKSldO1xyXG59XHJcbmNvbnN0IHRyYW5zZmVyQ2FjaGUgPSBuZXcgV2Vha01hcCgpO1xyXG5mdW5jdGlvbiB0cmFuc2ZlcihvYmosIHRyYW5zZmVycykge1xyXG4gICAgdHJhbnNmZXJDYWNoZS5zZXQob2JqLCB0cmFuc2ZlcnMpO1xyXG4gICAgcmV0dXJuIG9iajtcclxufVxyXG5mdW5jdGlvbiBwcm94eShvYmopIHtcclxuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iaiwgeyBbcHJveHlNYXJrZXJdOiB0cnVlIH0pO1xyXG59XHJcbmZ1bmN0aW9uIHdpbmRvd0VuZHBvaW50KHcsIGNvbnRleHQgPSBzZWxmKSB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICAgIHBvc3RNZXNzYWdlOiAobXNnLCB0cmFuc2ZlcmFibGVzKSA9PiB3LnBvc3RNZXNzYWdlKG1zZywgXCIqXCIsIHRyYW5zZmVyYWJsZXMpLFxyXG4gICAgICAgIGFkZEV2ZW50TGlzdGVuZXI6IGNvbnRleHQuYWRkRXZlbnRMaXN0ZW5lci5iaW5kKGNvbnRleHQpLFxyXG4gICAgICAgIHJlbW92ZUV2ZW50TGlzdGVuZXI6IGNvbnRleHQucmVtb3ZlRXZlbnRMaXN0ZW5lci5iaW5kKGNvbnRleHQpXHJcbiAgICB9O1xyXG59XHJcbmZ1bmN0aW9uIHRvV2lyZVZhbHVlKHZhbHVlKSB7XHJcbiAgICBmb3IgKGNvbnN0IFtuYW1lLCBoYW5kbGVyXSBvZiB0cmFuc2ZlckhhbmRsZXJzKSB7XHJcbiAgICAgICAgaWYgKGhhbmRsZXIuY2FuSGFuZGxlKHZhbHVlKSkge1xyXG4gICAgICAgICAgICBjb25zdCBbc2VyaWFsaXplZFZhbHVlLCB0cmFuc2ZlcmFibGVzXSA9IGhhbmRsZXIuc2VyaWFsaXplKHZhbHVlKTtcclxuICAgICAgICAgICAgcmV0dXJuIFtcclxuICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAzIC8qIEhBTkRMRVIgKi8sXHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZSxcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogc2VyaWFsaXplZFZhbHVlXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdHJhbnNmZXJhYmxlc1xyXG4gICAgICAgICAgICBdO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICB0eXBlOiAwIC8qIFJBVyAqLyxcclxuICAgICAgICAgICAgdmFsdWVcclxuICAgICAgICB9LFxyXG4gICAgICAgIHRyYW5zZmVyQ2FjaGUuZ2V0KHZhbHVlKSB8fCBbXVxyXG4gICAgXTtcclxufVxyXG5mdW5jdGlvbiBmcm9tV2lyZVZhbHVlKHZhbHVlKSB7XHJcbiAgICBzd2l0Y2ggKHZhbHVlLnR5cGUpIHtcclxuICAgICAgICBjYXNlIDMgLyogSEFORExFUiAqLzpcclxuICAgICAgICAgICAgcmV0dXJuIHRyYW5zZmVySGFuZGxlcnMuZ2V0KHZhbHVlLm5hbWUpLmRlc2VyaWFsaXplKHZhbHVlLnZhbHVlKTtcclxuICAgICAgICBjYXNlIDAgLyogUkFXICovOlxyXG4gICAgICAgICAgICByZXR1cm4gdmFsdWUudmFsdWU7XHJcbiAgICB9XHJcbn1cclxuZnVuY3Rpb24gcmVxdWVzdFJlc3BvbnNlTWVzc2FnZShlcCwgbXNnLCB0cmFuc2ZlcnMpIHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcclxuICAgICAgICBjb25zdCBpZCA9IGdlbmVyYXRlVVVJRCgpO1xyXG4gICAgICAgIGVwLmFkZEV2ZW50TGlzdGVuZXIoXCJtZXNzYWdlXCIsIGZ1bmN0aW9uIGwoZXYpIHtcclxuICAgICAgICAgICAgaWYgKCFldi5kYXRhIHx8ICFldi5kYXRhLmlkIHx8IGV2LmRhdGEuaWQgIT09IGlkKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZXAucmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm1lc3NhZ2VcIiwgbCk7XHJcbiAgICAgICAgICAgIHJlc29sdmUoZXYuZGF0YSk7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgaWYgKGVwLnN0YXJ0KSB7XHJcbiAgICAgICAgICAgIGVwLnN0YXJ0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGVwLnBvc3RNZXNzYWdlKHsgaWQsIC4uLm1zZyB9LCB0cmFuc2ZlcnMpO1xyXG4gICAgfSk7XHJcbn1cclxuZnVuY3Rpb24gZ2VuZXJhdGVVVUlEKCkge1xyXG4gICAgcmV0dXJuIG5ldyBBcnJheSg0KVxyXG4gICAgICAgIC5maWxsKDApXHJcbiAgICAgICAgLm1hcCgoKSA9PiBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikudG9TdHJpbmcoMTYpKVxyXG4gICAgICAgIC5qb2luKFwiLVwiKTtcclxufVxuXG5leHBvcnQgeyBjcmVhdGVFbmRwb2ludCwgZXhwb3NlLCBwcm94eSwgcHJveHlNYXJrZXIsIHRyYW5zZmVyLCB0cmFuc2ZlckhhbmRsZXJzLCB3aW5kb3dFbmRwb2ludCwgd3JhcCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tbGluay5tanMubWFwXG4iLCJpbXBvcnQgeyBleHBvc2UgfSBmcm9tICdjb21saW5rJztcbiAgdmFyIF9fYXdhaXRlciA9ICh0aGlzICYmIHRoaXMuX19hd2FpdGVyKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgX2FyZ3VtZW50cywgUCwgZ2VuZXJhdG9yKSB7XG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XG4gICAgcmV0dXJuIG5ldyAoUCB8fCAoUCA9IFByb21pc2UpKShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIGZ1bmN0aW9uIGZ1bGZpbGxlZCh2YWx1ZSkgeyB0cnkgeyBzdGVwKGdlbmVyYXRvci5uZXh0KHZhbHVlKSk7IH0gY2F0Y2ggKGUpIHsgcmVqZWN0KGUpOyB9IH1cbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XG4gICAgICAgIGZ1bmN0aW9uIHN0ZXAocmVzdWx0KSB7IHJlc3VsdC5kb25lID8gcmVzb2x2ZShyZXN1bHQudmFsdWUpIDogYWRvcHQocmVzdWx0LnZhbHVlKS50aGVuKGZ1bGZpbGxlZCwgcmVqZWN0ZWQpOyB9XG4gICAgICAgIHN0ZXAoKGdlbmVyYXRvciA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSkubmV4dCgpKTtcbiAgICB9KTtcbn07XG52YXIgX19nZW5lcmF0b3IgPSAodGhpcyAmJiB0aGlzLl9fZ2VuZXJhdG9yKSB8fCBmdW5jdGlvbiAodGhpc0FyZywgYm9keSkge1xuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XG4gICAgcmV0dXJuIGcgPSB7IG5leHQ6IHZlcmIoMCksIFwidGhyb3dcIjogdmVyYigxKSwgXCJyZXR1cm5cIjogdmVyYigyKSB9LCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgKGdbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uKCkgeyByZXR1cm4gdGhpczsgfSksIGc7XG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IHJldHVybiBmdW5jdGlvbiAodikgeyByZXR1cm4gc3RlcChbbiwgdl0pOyB9OyB9XG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xuICAgICAgICBpZiAoZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkdlbmVyYXRvciBpcyBhbHJlYWR5IGV4ZWN1dGluZy5cIik7XG4gICAgICAgIHdoaWxlIChfKSB0cnkge1xuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xuICAgICAgICAgICAgaWYgKHkgPSAwLCB0KSBvcCA9IFtvcFswXSAmIDIsIHQudmFsdWVdO1xuICAgICAgICAgICAgc3dpdGNoIChvcFswXSkge1xuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xuICAgICAgICAgICAgICAgIGNhc2UgNDogXy5sYWJlbCsrOyByZXR1cm4geyB2YWx1ZTogb3BbMV0sIGRvbmU6IGZhbHNlIH07XG4gICAgICAgICAgICAgICAgY2FzZSA1OiBfLmxhYmVsKys7IHkgPSBvcFsxXTsgb3AgPSBbMF07IGNvbnRpbnVlO1xuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgICAgICBpZiAoISh0ID0gXy50cnlzLCB0ID0gdC5sZW5ndGggPiAwICYmIHRbdC5sZW5ndGggLSAxXSkgJiYgKG9wWzBdID09PSA2IHx8IG9wWzBdID09PSAyKSkgeyBfID0gMDsgY29udGludWU7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSA2ICYmIF8ubGFiZWwgPCB0WzFdKSB7IF8ubGFiZWwgPSB0WzFdOyB0ID0gb3A7IGJyZWFrOyB9XG4gICAgICAgICAgICAgICAgICAgIGlmICh0ICYmIF8ubGFiZWwgPCB0WzJdKSB7IF8ubGFiZWwgPSB0WzJdOyBfLm9wcy5wdXNoKG9wKTsgYnJlYWs7IH1cbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xuICAgICAgICAgICAgICAgICAgICBfLnRyeXMucG9wKCk7IGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHsgb3AgPSBbNiwgZV07IHkgPSAwOyB9IGZpbmFsbHkgeyBmID0gdCA9IDA7IH1cbiAgICAgICAgaWYgKG9wWzBdICYgNSkgdGhyb3cgb3BbMV07IHJldHVybiB7IHZhbHVlOiBvcFswXSA/IG9wWzFdIDogdm9pZCAwLCBkb25lOiB0cnVlIH07XG4gICAgfVxufTtcbi8vIEV4cG9ydCBhcyB5b3Ugd291bGQgaW4gYSBub3JtYWwgbW9kdWxlOlxudmFyIFdhdlJhbmdlUmVxID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKCkge1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAgIC8vIHB1YmxpYyBhcGlcbiAgICBmdW5jdGlvbiBXYXZSYW5nZVJlcSgpIHtcbiAgICB9XG4gICAgV2F2UmFuZ2VSZXEucHJvdG90eXBlLnNldFVSTCA9IGZ1bmN0aW9uICh1cmwpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHJlc3AsIGJ1ZmZlciwgaGVhZGVySW5mb3M7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6IHJldHVybiBbNCAvKnlpZWxkKi8sIGZldGNoKHVybCwgeyBtZXRob2Q6ICdHRVQnLCBoZWFkZXJzOiB7IFJhbmdlOiBcImJ5dGVzPTAtMjAwXCIgfSB9KV07XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc3AgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzQgLyp5aWVsZCovLCByZXNwLmFycmF5QnVmZmVyKCldO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XG4gICAgICAgICAgICAgICAgICAgICAgICBidWZmZXIgPSBfYS5zZW50KCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBoZWFkZXJJbmZvcyA9IHRoaXMucGFyc2VXYXZIZWFkZXIoYnVmZmVyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMud2F2RmlsZUluZm8gPSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiB1cmwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGVhZGVySW5mb3M6IGhlYWRlckluZm9zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpcnN0U2FtcGxlQmxvY2tJZHg6IDAsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGFzdFNhbXBsZUJsb2NrSWR4OiAoaGVhZGVySW5mb3MuZGF0YUNodW5rU2l6ZSAvIGhlYWRlckluZm9zLkJsb2NrQWxpZ24pIC0gMVxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBbMiAvKnJldHVybiovXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBXYXZSYW5nZVJlcS5wcm90b3R5cGUuZ2V0V2F2RmlsZUluZm8gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfX2F3YWl0ZXIodGhpcywgdm9pZCAwLCB2b2lkIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfX2dlbmVyYXRvcih0aGlzLCBmdW5jdGlvbiAoX2EpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgdGhpcy53YXZGaWxlSW5mb107XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICBXYXZSYW5nZVJlcS5wcm90b3R5cGUuZ2V0UmFuZ2UgPSBmdW5jdGlvbiAoc3RhcnRTYW1wbGVCbG9ja0lkeCwgZW5kU2FtcGxlQmxvY2tJZHgpIHtcbiAgICAgICAgcmV0dXJuIF9fYXdhaXRlcih0aGlzLCB2b2lkIDAsIHZvaWQgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGZpcnN0Qnl0ZSwgbGFzdEJ5dGUsIHJlc3AsIHNhbXBsZXNCaW4sIGhlYWRlckJpbiwgY3VyQnVmZmVyVmlldywgd2F2RmlsZUJpbiwgcmFuZ2U7XG4gICAgICAgICAgICByZXR1cm4gX19nZW5lcmF0b3IodGhpcywgZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgICAgICAgICAgc3dpdGNoIChfYS5sYWJlbCkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDA6XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3RhcnRTYW1wbGVCbG9ja0lkeCA8IDAgfHwgZW5kU2FtcGxlQmxvY2tJZHggPiB0aGlzLndhdkZpbGVJbmZvLmxhc3RTYW1wbGVCbG9ja0lkeCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IFwic3RhcnRTYW1wbGUgb3IgZW5kU2FtcGxlIG91dCBvZiByYW5nZVwiOyAvLyBzaWMgdGhpcyBkb2Vzbid0IHdvcmshXG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBmaXJzdEJ5dGUgPSB0aGlzLnNhbXBsZUJsb2NrSWR4VG9CeXRlKHN0YXJ0U2FtcGxlQmxvY2tJZHgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbGFzdEJ5dGUgPSB0aGlzLnNhbXBsZUJsb2NrSWR4VG9CeXRlKGVuZFNhbXBsZUJsb2NrSWR4ICsgMSkgLSAxO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgZmV0Y2godGhpcy53YXZGaWxlSW5mby51cmwsIHsgbWV0aG9kOiAnR0VUJywgaGVhZGVyczogeyBSYW5nZTogJ2J5dGVzPScgKyBmaXJzdEJ5dGUgKyAnLScgKyBsYXN0Qnl0ZSB9IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2cocmVzcCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgICAgICAgICAgICAgICByZXNwID0gX2Euc2VudCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFs0IC8qeWllbGQqLywgcmVzcC5hcnJheUJ1ZmZlcigpXTtcbiAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxuICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlc0JpbiA9IF9hLnNlbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGhlYWRlckJpbiA9IG5ldyBVaW50OEFycmF5KHRoaXMud2F2RmlsZUluZm8uaGVhZGVySW5mb3Mub3JpZ0JpbmFyeUhlYWRlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJCdWZmZXJWaWV3ID0gbmV3IFVpbnQzMkFycmF5KGhlYWRlckJpbi5idWZmZXIsIHRoaXMud2F2RmlsZUluZm8uaGVhZGVySW5mb3MuZGF0YUNodW5rU2l6ZUlkeCwgMSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhjdXJCdWZmZXJWaWV3KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1ckJ1ZmZlclZpZXdbMF0gPSAoZW5kU2FtcGxlQmxvY2tJZHggLSBzdGFydFNhbXBsZUJsb2NrSWR4ICsgMSkgKiB0aGlzLndhdkZpbGVJbmZvLmhlYWRlckluZm9zLk51bUNoYW5uZWxzICogKHRoaXMud2F2RmlsZUluZm8uaGVhZGVySW5mb3MuQml0c1BlclNhbXBsZSAvIDgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgd2F2RmlsZUJpbiA9IG5ldyBVaW50OEFycmF5KGhlYWRlckJpbi5sZW5ndGggKyBjdXJCdWZmZXJWaWV3WzBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdhdkZpbGVCaW4uc2V0KGhlYWRlckJpbiwgMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB3YXZGaWxlQmluLnNldChuZXcgVWludDhBcnJheShzYW1wbGVzQmluKSwgaGVhZGVyQmluLmxlbmd0aCk7XG4gICAgICAgICAgICAgICAgICAgICAgICByYW5nZSA9IHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBudW1iZXJPZkNoYW5uZWxzOiB0aGlzLndhdkZpbGVJbmZvLmhlYWRlckluZm9zLk51bUNoYW5uZWxzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDogY3VyQnVmZmVyVmlld1swXSAvIHRoaXMud2F2RmlsZUluZm8uaGVhZGVySW5mb3MuTnVtQ2hhbm5lbHMgLyAodGhpcy53YXZGaWxlSW5mby5oZWFkZXJJbmZvcy5CaXRzUGVyU2FtcGxlIC8gOCksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2FtcGxlUmF0ZTogdGhpcy53YXZGaWxlSW5mby5oZWFkZXJJbmZvcy5TYW1wbGVSYXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogd2F2RmlsZUJpbi5idWZmZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnRTYW1wbGVCbG9ja0lkeDogc3RhcnRTYW1wbGVCbG9ja0lkeCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmRTYW1wbGVCbG9ja0lkeDogZW5kU2FtcGxlQmxvY2tJZHhcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gWzIgLypyZXR1cm4qLywgKHJhbmdlKV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgV2F2UmFuZ2VSZXEucHJvdG90eXBlLmNhbGN1bGF0ZVBlYWtzID0gZnVuY3Rpb24gKGF1ZGlvQnVmZmVyKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGF1ZGlvQnVmZmVyKTtcbiAgICB9O1xuICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gICAgLy8gcHJpdmF0ZSBhcGlcbiAgICBXYXZSYW5nZVJlcS5wcm90b3R5cGUuc2FtcGxlQmxvY2tJZHhUb0J5dGUgPSBmdW5jdGlvbiAoc2FtcGxlQmxvY2tJZHgpIHtcbiAgICAgICAgcmV0dXJuICh0aGlzLndhdkZpbGVJbmZvLmhlYWRlckluZm9zLm9mZnNldFRvRGF0YUNodW5rICsgc2FtcGxlQmxvY2tJZHggKiB0aGlzLndhdkZpbGVJbmZvLmhlYWRlckluZm9zLkJsb2NrQWxpZ24pO1xuICAgIH07XG4gICAgV2F2UmFuZ2VSZXEucHJvdG90eXBlLnBhcnNlV2F2SGVhZGVyID0gZnVuY3Rpb24gKGJ1Zikge1xuICAgICAgICAvLyBUT0RPOiBjaGVjayBvbiBlcnJvciBoYW5kbGluZ1xuICAgICAgICB2YXIgaGVhZGVySW5mb3M7XG4gICAgICAgIHZhciBjdXJCaW5JZHgsIGN1ckJ1ZmZlciwgY3VyQnVmZmVyVmlldztcbiAgICAgICAgLy8gQ2h1bmtJZCA9PSBSSUZGIENIRUNLXG4gICAgICAgIGN1ckJpbklkeCA9IDA7XG4gICAgICAgIGN1ckJ1ZmZlclZpZXcgPSBuZXcgVWludDhBcnJheShidWYsIGN1ckJpbklkeCwgNCk7XG4gICAgICAgIHZhciBDaHVua0lEID0gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLCBjdXJCdWZmZXJWaWV3KTtcbiAgICAgICAgaWYgKENodW5rSUQgIT09ICdSSUZGJykge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdXYXYgcmVhZCBlcnJvcjogQ2h1bmtJRCBub3QgUklGRiBidXQgJyArIENodW5rSUQpO1xuICAgICAgICB9XG4gICAgICAgIC8vIENodW5rU2l6ZVxuICAgICAgICBjdXJCaW5JZHggPSA0O1xuICAgICAgICBjdXJCdWZmZXJWaWV3ID0gbmV3IFVpbnQzMkFycmF5KGJ1ZiwgY3VyQmluSWR4LCAxKTtcbiAgICAgICAgdmFyIENodW5rU2l6ZSA9IGN1ckJ1ZmZlclZpZXdbMF07XG4gICAgICAgIC8vIEZvcm1hdCA9PSBXQVZFIENIRUNLXG4gICAgICAgIGN1ckJpbklkeCA9IDg7XG4gICAgICAgIGN1ckJ1ZmZlclZpZXcgPSBuZXcgVWludDhBcnJheShidWYsIGN1ckJpbklkeCwgNCk7XG4gICAgICAgIHZhciBGb3JtYXQgPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KG51bGwsIGN1ckJ1ZmZlclZpZXcpO1xuICAgICAgICBpZiAoRm9ybWF0ICE9PSAnV0FWRScpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2F2IHJlYWQgZXJyb3I6IEZvcm1hdCBub3QgV0FWRSBidXQgJyArIEZvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayBmb3IgJ2ZtdCAnIHN1Yi1jaHVuayBhcyBkZXNjcmliZWQgaGVyZTogaHR0cDovL3NvdW5kZmlsZS5zYXBwLm9yZy9kb2MvV2F2ZUZvcm1hdC9cbiAgICAgICAgdmFyIGZvdW5kQ2h1bmsgPSBmYWxzZTtcbiAgICAgICAgdmFyIGZtdEJpbklkeCA9IDEyOyAvLyAxMiBpZiBmaXJzdCBzdWItY2h1bmtcbiAgICAgICAgdmFyIEZtdFN1YmNodW5rSUQ7XG4gICAgICAgIHdoaWxlICghZm91bmRDaHVuaykge1xuICAgICAgICAgICAgLy8gY3VyQnVmZmVyID0gYnVmLnN1YmFycmF5KGZtdEJpbklkeCwgNCk7XG4gICAgICAgICAgICBjdXJCdWZmZXJWaWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLCBmbXRCaW5JZHgsIDQpO1xuICAgICAgICAgICAgdmFyIGN1cjRjaGFycyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY3VyQnVmZmVyVmlldyk7XG4gICAgICAgICAgICBpZiAoY3VyNGNoYXJzID09PSAnZm10ICcpIHtcbiAgICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZygnZm91bmQgZm10IGNodW5rIGF0ICcgKyBmbXRCaW5JZHgpO1xuICAgICAgICAgICAgICAgIEZtdFN1YmNodW5rSUQgPSAnZm10ICc7XG4gICAgICAgICAgICAgICAgZm91bmRDaHVuayA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBmbXRCaW5JZHggKz0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChjdXI0Y2hhcnMgPT09ICdkYXRhJykge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2F2IHJlYWQgZXJyb3I6IFJlYWNoZWQgZW5kIG9mIGhlYWRlciBieSByZWFjaGluZyBkYXRhIHN1Yi1jaHVuayB3aXRob3V0IGZpbmRpbmcgXCJmbXQgXCIgc3ViLWNodW5rJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgLy8gRm10U3ViY2h1bmtTaXplIHBhcnNpbmdcbiAgICAgICAgY3VyQmluSWR4ID0gZm10QmluSWR4ICsgNDsgLy8gMTZcbiAgICAgICAgY3VyQnVmZmVyVmlldyA9IG5ldyBVaW50MzJBcnJheShidWYsIGN1ckJpbklkeCwgNCk7XG4gICAgICAgIHZhciBGbXRTdWJjaHVua1NpemUgPSBjdXJCdWZmZXJWaWV3WzBdO1xuICAgICAgICAvLyBBdWRpb0Zvcm1hdCA9PSAxICBDSEVDS1xuICAgICAgICBjdXJCaW5JZHggPSBmbXRCaW5JZHggKyA4OyAvLyAyMFxuICAgICAgICAvL2N1ckJ1ZmZlciA9IGJ1Zi5zdWJhcnJheShjdXJCaW5JZHgsIDIpO1xuICAgICAgICBjdXJCdWZmZXJWaWV3ID0gbmV3IFVpbnQxNkFycmF5KGJ1ZiwgY3VyQmluSWR4LCAyKTtcbiAgICAgICAgdmFyIEF1ZGlvRm9ybWF0ID0gY3VyQnVmZmVyVmlld1swXTtcbiAgICAgICAgaWYgKFswLCAxXS5pbmRleE9mKEF1ZGlvRm9ybWF0KSA9PT0gLTEpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignV2F2IHJlYWQgZXJyb3I6IEF1ZGlvRm9ybWF0IG5vdCAwIG9yIDEgYnV0ICcgKyBBdWRpb0Zvcm1hdCk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gTnVtQ2hhbm5lbHMgPT0gMSAgQ0hFQ0tcbiAgICAgICAgY3VyQmluSWR4ID0gZm10QmluSWR4ICsgMTA7IC8vIDIyXG4gICAgICAgIGN1ckJ1ZmZlclZpZXcgPSBuZXcgVWludDE2QXJyYXkoYnVmLCBjdXJCaW5JZHgsIDIpO1xuICAgICAgICB2YXIgTnVtQ2hhbm5lbHMgPSBjdXJCdWZmZXJWaWV3WzBdO1xuICAgICAgICBpZiAoTnVtQ2hhbm5lbHMgPCAxKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1dhdiByZWFkIGVycm9yOiBOdW1DaGFubmVscyBub3QgZ3JlYXRlciB0aGFuIDEgYnV0ICcgKyBOdW1DaGFubmVscyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2FtcGxlUmF0ZVxuICAgICAgICBjdXJCaW5JZHggPSBmbXRCaW5JZHggKyAxMjsgLy8gMjRcbiAgICAgICAgY3VyQnVmZmVyVmlldyA9IG5ldyBVaW50MzJBcnJheShidWYsIGN1ckJpbklkeCwgMSk7XG4gICAgICAgIHZhciBTYW1wbGVSYXRlID0gY3VyQnVmZmVyVmlld1swXTtcbiAgICAgICAgLy8gQnl0ZVJhdGVcbiAgICAgICAgY3VyQmluSWR4ID0gZm10QmluSWR4ICsgMTY7IC8vIDI4XG4gICAgICAgIGN1ckJ1ZmZlclZpZXcgPSBuZXcgVWludDMyQXJyYXkoYnVmLCBjdXJCaW5JZHgsIDEpO1xuICAgICAgICB2YXIgQnl0ZVJhdGUgPSBjdXJCdWZmZXJWaWV3WzBdO1xuICAgICAgICAvLyBCbG9ja0FsaWduXG4gICAgICAgIGN1ckJpbklkeCA9IGZtdEJpbklkeCArIDIwOyAvLyAzMlxuICAgICAgICBjdXJCdWZmZXJWaWV3ID0gbmV3IFVpbnQxNkFycmF5KGJ1ZiwgY3VyQmluSWR4LCAxKTtcbiAgICAgICAgdmFyIEJsb2NrQWxpZ24gPSBjdXJCdWZmZXJWaWV3WzBdO1xuICAgICAgICAvLyBCaXRzUGVyU2FtcGxlXG4gICAgICAgIGN1ckJpbklkeCA9IGZtdEJpbklkeCArIDIyOyAvLyAzNFxuICAgICAgICBjdXJCdWZmZXJWaWV3ID0gbmV3IFVpbnQxNkFycmF5KGJ1ZiwgY3VyQmluSWR4LCAxKTtcbiAgICAgICAgdmFyIEJpdHNQZXJTYW1wbGUgPSBjdXJCdWZmZXJWaWV3WzBdO1xuICAgICAgICAvLyBsb29rIGZvciBkYXRhIGNodW5rIHNpemVcbiAgICAgICAgZm91bmRDaHVuayA9IGZhbHNlO1xuICAgICAgICB2YXIgZGF0YUJpbklkeCA9IGZtdEJpbklkeCArIDI0OyAvLyAzNlxuICAgICAgICB2YXIgZGF0YUNodW5rU2l6ZUlkeDtcbiAgICAgICAgdmFyIGRhdGFDaHVua1NpemU7XG4gICAgICAgIHZhciBvZmZzZXRUb0RhdGFDaHVuaztcbiAgICAgICAgd2hpbGUgKCFmb3VuZENodW5rKSB7XG4gICAgICAgICAgICAvL2N1ckJ1ZmZlciA9IGJ1Zi5zdWJhcnJheShkYXRhQmluSWR4LCA0KTtcbiAgICAgICAgICAgIGN1ckJ1ZmZlclZpZXcgPSBuZXcgVWludDhBcnJheShidWYsIGRhdGFCaW5JZHgsIDQpO1xuICAgICAgICAgICAgdmFyIGN1cjRjaGFycyA9IFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCwgY3VyQnVmZmVyVmlldyk7XG4gICAgICAgICAgICBpZiAoY3VyNGNoYXJzID09PSAnZGF0YScpIHtcbiAgICAgICAgICAgICAgICBmb3VuZENodW5rID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjdXJCdWZmZXJWaWV3ID0gbmV3IFVpbnQzMkFycmF5KGJ1ZiwgZGF0YUJpbklkeCArIDQsIDEpO1xuICAgICAgICAgICAgICAgIGRhdGFDaHVua1NpemVJZHggPSBkYXRhQmluSWR4ICsgNDtcbiAgICAgICAgICAgICAgICBkYXRhQ2h1bmtTaXplID0gY3VyQnVmZmVyVmlld1swXTtcbiAgICAgICAgICAgICAgICBvZmZzZXRUb0RhdGFDaHVuayA9IGRhdGFCaW5JZHggKyA4O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YUJpbklkeCArPSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBDaHVua0lEOiBDaHVua0lELFxuICAgICAgICAgICAgQ2h1bmtTaXplOiBDaHVua1NpemUsXG4gICAgICAgICAgICBGb3JtYXQ6IEZvcm1hdCxcbiAgICAgICAgICAgIEZtdFN1YmNodW5rSUQ6IEZtdFN1YmNodW5rSUQsXG4gICAgICAgICAgICBGbXRTdWJjaHVua1NpemU6IEZtdFN1YmNodW5rU2l6ZSxcbiAgICAgICAgICAgIEF1ZGlvRm9ybWF0OiBBdWRpb0Zvcm1hdCxcbiAgICAgICAgICAgIE51bUNoYW5uZWxzOiBOdW1DaGFubmVscyxcbiAgICAgICAgICAgIFNhbXBsZVJhdGU6IFNhbXBsZVJhdGUsXG4gICAgICAgICAgICBCeXRlUmF0ZTogQnl0ZVJhdGUsXG4gICAgICAgICAgICBCbG9ja0FsaWduOiBCbG9ja0FsaWduLFxuICAgICAgICAgICAgQml0c1BlclNhbXBsZTogQml0c1BlclNhbXBsZSxcbiAgICAgICAgICAgIGRhdGFDaHVua1NpemVJZHg6IGRhdGFDaHVua1NpemVJZHgsXG4gICAgICAgICAgICBkYXRhQ2h1bmtTaXplOiBkYXRhQ2h1bmtTaXplLFxuICAgICAgICAgICAgb2Zmc2V0VG9EYXRhQ2h1bms6IG9mZnNldFRvRGF0YUNodW5rLFxuICAgICAgICAgICAgb3JpZ0JpbmFyeUhlYWRlcjogbmV3IFVpbnQ4QXJyYXkoYnVmLCAwLCBvZmZzZXRUb0RhdGFDaHVuaykgLy8gY29weSBvcmlnaW5hbFxuICAgICAgICB9O1xuICAgIH07XG4gICAgO1xuICAgIHJldHVybiBXYXZSYW5nZVJlcTtcbn0oKSk7XG5leHBvcnQgeyBXYXZSYW5nZVJlcSB9O1xuO1xuICBleHBvc2UoXG4gICAgT2JqZWN0LmtleXMoX193ZWJwYWNrX2V4cG9ydHNfXykucmVkdWNlKGZ1bmN0aW9uKHIsayl7XG4gICAgICBpZiAoaz09J19fZXNNb2R1bGUnKSByZXR1cm4gcjtcbiAgICAgIHJba10gPSBfX3dlYnBhY2tfZXhwb3J0c19fW2tdO1xuICAgICAgcmV0dXJuIHJcbiAgICB9LHt9KVxuICApIl0sInNvdXJjZVJvb3QiOiIifQ==