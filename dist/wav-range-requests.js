var wavRangeRequests=function(e){var t={};function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)n.d(r,o,function(t){return e[t]}.bind(null,o));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=1)}([function(e,t,n){e.exports=n(2).wrap(n(3)()),e.exports.__esModule=!0},function(e,t,n){"use strict";n.r(t),n.d(t,"numToString",(function(){return i}));var r=n(0),o=function(e,t,n,r){return new(n||(n=Promise))((function(o,a){function i(e){try{u(r.next(e))}catch(e){a(e)}}function s(e){try{u(r.throw(e))}catch(e){a(e)}}function u(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,s)}u((r=r.apply(e,t||[])).next())}))},a=function(e,t){var n,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(n)throw new TypeError("Generator is already executing.");for(;i;)try{if(n=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=(o=i.trys).length>0&&o[o.length-1])&&(6===a[0]||2===a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=t.call(e,i)}catch(e){a=[6,e],r=0}finally{n=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}};function i(e){return e.toString()}!function(){o(this,void 0,void 0,(function(){var e,t,n,o,i,s,u,c;return a(this,(function(a){switch(a.label){case 0:return e=new URL("http://localhost:9001/please_call_stella.wav"),[4,new r.WavRangeReq];case 1:return[4,(t=a.sent()).setURL(e.href)];case 2:return a.sent(),[4,t.getWavFileInfo()];case 3:return n=a.sent(),console.log("fileInfo:"),console.log(n),[4,t.getRange(100,44100)];case 4:return o=a.sent(),console.log("wavRangeObj"),console.log(o),[4,new window.OfflineAudioContext(o.numberOfChannels,o.length,o.sampleRate).decodeAudioData(o.buffer)];case 5:return i=a.sent(),console.log(i.getChannelData(0)),console.log(o.buffer),s=new Blob([o.buffer],{type:"audio/wav"}),u=window.URL.createObjectURL(s),console.log(u),c=document.getElementById("audioel"),console.log(c),[2]}}))}))}(),console.log("here")},function(e,t,n){"use strict";n.r(t),n.d(t,"createEndpoint",(function(){return o})),n.d(t,"expose",(function(){return s})),n.d(t,"proxy",(function(){return p})),n.d(t,"proxyMarker",(function(){return r})),n.d(t,"transfer",(function(){return f})),n.d(t,"transferHandlers",(function(){return i})),n.d(t,"windowEndpoint",(function(){return d})),n.d(t,"wrap",(function(){return u}));const r=Symbol("Comlink.proxy"),o=Symbol("Comlink.endpoint"),a=new WeakSet,i=new Map([["proxy",{canHandle:e=>e&&e[r],serialize(e){const{port1:t,port2:n}=new MessageChannel;return s(e,t),[n,[n]]},deserialize:e=>(e.start(),u(e))}],["throw",{canHandle:e=>a.has(e),serialize(e){const t=e instanceof Error;let n=e;return t&&(n={isError:t,message:e.message,stack:e.stack}),[n,[]]},deserialize(e){if(e.isError)throw Object.assign(new Error,e);throw e}}]]);function s(e,t=self){t.addEventListener("message",async n=>{if(!n||!n.data)return;const{id:r,type:o,path:i}={path:[],...n.data},u=(n.data.argumentList||[]).map(h);let c;try{const t=i.slice(0,-1).reduce((e,t)=>e[t],e),r=i.reduce((e,t)=>e[t],e);switch(o){case 0:c=await r;break;case 1:t[i.slice(-1)[0]]=h(n.data.value),c=!0;break;case 2:c=await r.apply(t,u);break;case 3:c=p(await new r(...u));break;case 4:{const{port1:t,port2:n}=new MessageChannel;s(e,n),c=f(t,[t])}break;default:console.warn("Unrecognized message",n.data)}}catch(e){c=e,a.add(e)}const[l,d]=g(c);t.postMessage({...l,id:r},d)}),t.start&&t.start()}function u(e){return function e(t,n=[]){const r=new Proxy((function(){}),{get(o,a){if("then"===a){if(0===n.length)return{then:()=>r};const e=b(t,{type:0,path:n.map(e=>e.toString())}).then(h);return e.then.bind(e)}return e(t,[...n,a])},set(e,r,o){const[a,i]=g(o);return b(t,{type:1,path:[...n,r].map(e=>e.toString()),value:a},i).then(h)},apply(r,a,i){const s=n[n.length-1];if(s===o)return b(t,{type:4}).then(h);if("bind"===s)return e(t,n.slice(0,-1));const[u,l]=c(i);return b(t,{type:2,path:n.map(e=>e.toString()),argumentList:u},l).then(h)},construct(e,r){const[o,a]=c(r);return b(t,{type:3,path:n.map(e=>e.toString()),argumentList:o},a).then(h)}});return r}(e)}function c(e){const t=e.map(g);return[t.map(e=>e[0]),(n=t.map(e=>e[1]),Array.prototype.concat.apply([],n))];var n}const l=new WeakMap;function f(e,t){return l.set(e,t),e}function p(e){return Object.assign(e,{[r]:!0})}function d(e,t=self){return{postMessage:(t,n)=>e.postMessage(t,"*",n),addEventListener:t.addEventListener.bind(t),removeEventListener:t.removeEventListener.bind(t)}}function g(e){for(const[t,n]of i)if(n.canHandle(e)){const[r,o]=n.serialize(e);return[{type:3,name:t,value:r},o]}return[{type:0,value:e},l.get(e)||[]]}function h(e){switch(e.type){case 3:return i.get(e.name).deserialize(e.value);case 0:return e.value}}function b(e,t,n){return new Promise(r=>{const o=new Array(4).fill(0).map(()=>Math.floor(Math.random()*Number.MAX_SAFE_INTEGER).toString(16)).join("-");e.addEventListener("message",(function t(n){n.data&&n.data.id&&n.data.id===o&&(e.removeEventListener("message",t),r(n.data))})),e.start&&e.start(),e.postMessage({id:o,...t},n)})}},function(e,t,n){e.exports=function(){return new Worker(n.p+"9c1f9405db4e1bb467aa.worker.js")}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,